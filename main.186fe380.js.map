{"version":3,"sources":["scripts/main.js"],"names":["baseUrl","phonesUrl","body","document","querySelector","getPhonesId","fetch","then","response","json","result","map","phone","id","createDiv","className","heading","arrayOfPhones","insertAdjacentHTML","el","name","getFirstReceivedDetails","ids","firstReceived","Promise","race","push","toUpperCase","getThreeFastestDetails","threeFastest","count","all","sort","a","b","slice","resp","length","getAllSuccessfulDetails","allSuccess","responses","catch","error"],"mappings":";AAAA,aAEA,IAAMA,EACF,oEACEC,EACF,wEAEEC,EAAOC,SAASC,cAAc,QAE9BC,EAAc,WACXC,OAAAA,MAAML,GACVM,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAG,GACGA,OAAAA,EAAOC,IAAI,SAAAC,GAASA,OAAAA,EAAMC,QAIjCC,EAAY,SAACC,EAAWC,EAASC,GACrCf,EAAKgB,mBAAmB,YACPH,sBAAAA,OAAAA,EACLC,oBAAAA,OAAAA,EAFZ,2BAMAC,EAAcN,IAAI,SAAAQ,GACHjB,EAAKE,cAAkBW,IAAAA,OAAAA,IAE/BG,mBAAmB,YAERC,mCAAAA,OAAAA,EAAGN,GAEDM,wCAAAA,OAAAA,EAAGC,KAJrB,2BAUEC,EAA0B,SAACC,GACzBC,IAAAA,EAAgB,GAEtBC,QAAQC,KAAKH,EAAIX,IAAI,SAAAQ,GAAMb,OAAAA,MAASN,GAAAA,OAAAA,GAAUmB,OAAAA,EAAvB,aACpBZ,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAG,GACJa,EAAcG,KAAK,CACjBb,GAAIH,EAAOG,GAAGc,cACdP,KAAMV,EAAOU,OAEfN,EAAU,iBAAkB,iBAAkBS,MAI9CK,EAAyB,SAACN,GACxBO,IAAAA,EAAe,GACjBC,EAAQ,EAEZN,QAAQO,IAAIT,EAAIX,IAAI,SAAAQ,GACXb,OAAAA,MAASN,GAAAA,OAAAA,GAAUmB,OAAAA,EAAnB,UACJZ,KAAK,SAAAC,GAAa,MAAA,CACjBA,SAAAA,EACAsB,MAAOA,UAGVvB,KAAK,SAAAC,GAAYA,OAAAA,EACfwB,KAAK,SAACC,EAAGC,GAAMD,OAAAA,EAAEH,MAAQI,EAAEJ,QAC3BK,MAAM,EAAG,GACTxB,IAAI,SAAAyB,GAAQA,OAAAA,EAAK5B,SAASC,OACxBF,KAAK,SAAAG,GACJmB,EAAaH,KAAK,CAChBb,GAAIH,EAAOG,GAAGc,cACdP,KAAMV,EAAOU,OAGa,IAAxBS,EAAaQ,QACfvB,EAAU,gBAAiB,gBAAiBe,UAMlDS,EAA0B,SAAChB,GACzBiB,IAAAA,EAAa,GAEnBf,QAAQO,IAAIT,EAAIX,IAAI,SAAAQ,GAAMb,OAAAA,MAASN,GAAAA,OAAAA,GAAUmB,OAAAA,EAAvB,aACnBZ,KAAK,SAAAiC,GACJA,EAAU7B,IAAI,SAAAQ,GACZA,EAAGV,OACAF,KAAK,SAAAG,GACJ6B,EAAWb,KAAK,CACdb,GAAIH,EAAOG,GACXO,KAAMV,EAAOU,OAGW,KAAtBmB,EAAWF,QACbvB,EAAU,iBAAkB,iBAAkByB,UAO5DlC,IACGE,KAAK,SAAAG,GAAUW,OAAAA,EAAwBX,KAE1CL,IACGE,KAAK,SAAAG,GAAUkB,OAAAA,EAAuBlB,KACtC+B,MAAM,SAAAC,GAASA,OAAAA,IAElBrC,IACGE,KAAK,SAAAG,GAAU4B,OAAAA,EAAwB5B","file":"main.186fe380.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst baseUrl\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\nconst phonesUrl\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\n\nconst body = document.querySelector('body');\n\nconst getPhonesId = () => {\n  return fetch(phonesUrl)\n    .then(response => response.json())\n    .then(result => {\n      return result.map(phone => phone.id);\n    });\n};\n\nconst createDiv = (className, heading, arrayOfPhones) => {\n  body.insertAdjacentHTML('beforeend', `\n      <ul class=\"${className}\">\n        <h2>${heading}</h2>\n      </ul>\n  `);\n\n  arrayOfPhones.map(el => {\n    const list = body.querySelector(`.${className}`);\n\n    list.insertAdjacentHTML('beforeend', `\n      <li>\n        Phone ID: ${el.id}\n        <br>\n        Phone Name: ${el.name}\n      </li>\n    `);\n  });\n};\n\nconst getFirstReceivedDetails = (ids) => {\n  const firstReceived = [];\n\n  Promise.race(ids.map(el => fetch(`${baseUrl}${el}.json`)))\n    .then(response => response.json())\n    .then(result => {\n      firstReceived.push({\n        id: result.id.toUpperCase(),\n        name: result.name,\n      });\n      createDiv('first-received', 'First Received', firstReceived);\n    });\n};\n\nconst getThreeFastestDetails = (ids) => {\n  const threeFastest = [];\n  let count = 0;\n\n  Promise.all(ids.map(el => {\n    return fetch(`${baseUrl}${el}.json`)\n      .then(response => ({\n        response,\n        count: count++,\n      }));\n  }))\n    .then(response => response\n      .sort((a, b) => a.count - b.count)\n      .slice(0, 3)\n      .map(resp => resp.response.json()\n        .then(result => {\n          threeFastest.push({\n            id: result.id.toUpperCase(),\n            name: result.name,\n          });\n\n          if (threeFastest.length === 3) {\n            createDiv('three-fastest', 'Three Fastest', threeFastest);\n          }\n        })\n      ));\n};\n\nconst getAllSuccessfulDetails = (ids) => {\n  const allSuccess = [];\n\n  Promise.all(ids.map(el => fetch(`${baseUrl}${el}.json`)))\n    .then(responses => {\n      responses.map(el => {\n        el.json()\n          .then(result => {\n            allSuccess.push({\n              id: result.id,\n              name: result.name,\n            });\n\n            if (allSuccess.length === 20) {\n              createDiv('all-successful', 'All Successful', allSuccess);\n            }\n          });\n      });\n    });\n};\n\ngetPhonesId()\n  .then(result => getFirstReceivedDetails(result));\n\ngetPhonesId()\n  .then(result => getThreeFastestDetails(result))\n  .catch(error => error);\n\ngetPhonesId()\n  .then(result => getAllSuccessfulDetails(result));\n"]}